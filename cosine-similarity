#!/usr/bin/env perl
use strict;
use warnings;

use Data::CosineSimilarity;
use File::Basename;
use File::Find::Rule;
use Lingua::EN::Ngram;
use Lingua::StopWords qw(getStopWords);

my $path = shift || die "Usage: perl $0 /path/to/text/files\n";

my @files = File::Find::Rule->file()->name('*.txt')->in($path);

my $stop = getStopWords('en');

my %words;

for my $file ( @files ) {
    my $ngram = Lingua::EN::Ngram->new( file => $file );
    my $unigram = $ngram->ngram(1);

    for my $word (sort { $unigram->{$b} <=> $unigram->{$a} } keys %$unigram) {
        next if $word !~ /^[\sA-Za-z]+$/; # Exclude punctuation
        next if $stop->{$word}; # Exclude stopwords
        next if $unigram->{$word} == 1; # No single frequency phrases

        $words{$file}->{$word} = $unigram->{$word};
    }
}
#use Data::Dumper;warn(__PACKAGE__,' L',__LINE__,". MARK: ",Dumper\%words);

my $cs = Data::CosineSimilarity->new;

for my $file ( keys %words ) {
    $cs->add( $file => $words{$file} );
}

my ( $best, $worst, $r );

for my $file ( sort keys %words ) {
    ( $best, $r ) = $cs->best_for_label($file);
    printf "Best labels: %s\n", join ', ', map { basename($_) } $r->labels;
    printf "\tcosine: %.3f, radian: %.3f, degree: %.3f\n", $r->cosine, $r->radian, $r->degree;

#    ($worst, $r) = $cs->worst_for_label($file);
#    printf "Worst labels: %s\n", join ', ', map { basename($_) } $r->labels;
#    printf "\tcosine: %.3f, radian: %.3f, degree: %.3f\n", $r->cosine, $r->radian, $r->degree;

    print "\n";
}
