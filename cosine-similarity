#!/usr/bin/env perl
use strict;
use warnings;

use Data::CosineSimilarity;
use File::Basename;
use File::Find::Rule;
use Lingua::EN::Ngram;
use Lingua::StopWords qw(getStopWords);

# Get a path of text files from the user
my $path = shift || die "Usage: perl $0 /path/to/text/files\n";

# Turn the path into a list of files
my @files = File::Find::Rule->file()->name('*.txt')->in($path);

# Get the English stopwords
my $stop = getStopWords('en');

# Delare the bucket for the files => { word => ngram_count } items
my %words;

# Populate the words bucket with unigrams
for my $file ( @files ) {
    my $ngram = Lingua::EN::Ngram->new( file => $file );
    my $unigram = $ngram->ngram(1);

    # Inspect each unigram seen
    for my $word ( sort { $unigram->{$b} <=> $unigram->{$a} } keys %$unigram ) {
        next if $word !~ /^[\sA-Za-z]+$/; # Exclude punctuation
        next if $stop->{$word}; # Exclude stopwords
        next if $unigram->{$word} == 1; # No single frequency phrases

        # Add the file, word and unigram to the words bucket
        $words{$file}->{$word} = $unigram->{$word};
    }
}
#use Data::Dumper;warn(__PACKAGE__,' L',__LINE__,". MARK: ",Dumper\%words);

# Get the files that have used the given word
my %vocab;
for my $file ( keys %words ) {
    for my $word ( keys %{ $words{$file} } ) {
        push @{ $vocab{$word} }, $file;
    }
}
my %by_file;
for my $word ( sort keys %vocab ) {
    for my $file ( sort keys %words ) {
        if ( grep { $file eq $_ } @{ $vocab{$word} } ) {
            $by_file{$file}->{$word} = 1;
        }
        else {
            $by_file{$file}->{$word} = 0;
        }
    }
}

# Instantiate a CosineSimilarity object
my $cs = Data::CosineSimilarity->new;

# Add each words item to the CosineSimilarity object
for my $file ( keys %by_file ) {
    $cs->add( $file => $by_file{$file} );
}

# Compare each files words to every other files words
for my $file ( sort keys %words ) {
    # Get the closest matching files
    my ( undef, $r ) = $cs->best_for_label($file);
    _output( 'Best', $r );

    # Get the least closest matching files
    ( undef, $r ) = $cs->worst_for_label($file);
    _output( 'Worst', $r );

    print "\n";
}

sub _output {
    my ( $label, $r ) = @_;
    printf "%s match: %s\n", $label, join ' => ', map { basename($_) } $r->labels;
    printf "\tcosine: %.3f, radian: %.3f, degree: %.3f\n", $r->cosine, $r->radian, $r->degree;
}
