#!/usr/bin/env perl

use DBI;
use Lingua::Word::Parser;
use Mojo::JSON qw( decode_json );
use Mojolicious::Lite;
use Readonly;

Readonly my $APP_SECRET => 'ABC123';

Readonly my $MAX_WORD_SIZE => 30;

Readonly my $DB_NAME => 'word_part';
Readonly my $DB_USER => 'root';
Readonly my $DB_PASS => 'abc123';
Readonly my $DB_TYPE => 'mysql';
Readonly my $DB_HOST => 'localhost';

# The affix is a prefix or a suffix
Readonly my $PREFIX => '(?=\\w)';
Readonly my $SUFFIX => '(?<=\\w)';

Readonly my $ACCESS_SQL => 'SELECT username FROM api_access WHERE token = ? AND active = 1';
Readonly my $INSERT_SQL => 'INSERT INTO fragment (affix, definition, etymology) VALUES (?, ?, ?)';
Readonly my $DELETE_SQL => 'DELETE FROM fragment WHERE id=?';
Readonly my $UPDATE_SQL => 'UPDATE fragment SET affix=?, definition=?, etymology=? WHERE id=?';
Readonly my $EDIT_SQL   => 'SELECT * FROM fragment WHERE id = ?';
Readonly my $SEARCH_SQL => 'SELECT * FROM fragment WHERE %s LIKE ?';

# Create or return a database handle
my $dbh;
helper db => sub {
    if ($dbh) {
        return $dbh;
    }
    else {
        $dbh = DBI->connect(
            "DBI:$DB_TYPE:database=$DB_NAME;host=$DB_HOST", $DB_USER, $DB_PASS
        ) or die $DBI::errstr;
        return $dbh;
    }
};

# Disconnect db connection
helper db_disconnect => sub {
    my $self = shift;
    $self->db->disconnect;
    $dbh = '';
};

# Finish the statement and disconnect the database connection
helper db_finish_and_disconnect => sub {
    my $self = shift;
    my $sth  = shift;
    $sth->finish;
    $self->db_disconnect;
};

# Prepare and execute a query
helper db_prepare_and_execute => sub {
    my $self = shift;
    my ( $sql, $binds ) = @_;
    my $sth = $self->db->prepare($sql);
    my $rv  = $sth->execute( @$binds );
    return ( $sth, $rv );
};

# Return a hash from a json string
helper json_data => sub {
    my $self = shift;
    my $hash = decode_json( $self->param('json') );
    return $hash;
};

# Validate that an API request has a valid token
under sub {
    my $self = shift;

    my $token = $self->param('token');

    my ( $sth, $rv ) = $self->db_prepare_and_execute( $ACCESS_SQL, [ $token ] );
    my ($username) = $sth->fetchrow;
    $sth->finish;

    if ($username) {
        return 1;
    }
    else {
        $self->render( text => 'Access denied' );
        $self->db_disconnect;
        return;
    }
};

# curl http://127.0.0.1:3000/affix/fug?token=ABC123
get '/affix/:affix' => sub {
    my $self = shift;
    _search_records( $self, 'affix', 'affix' );
};

# curl http://127.0.0.1:3000/defn/stun?token=ABC123
get '/defn/:defn' => sub {
    my $self = shift;
    _search_records( $self, 'defn', 'definition' );
};

# curl --data 'token=ABC123&json={"affix":"XXX","defn":"xyz"}' http://127.0.0.1:3000/add
# curl --data 'token=ABC123&affix=XXX&defn=xyz' http://127.0.0.1:3000/add
post '/add/' => sub {
    my $self = shift;

    my $hash;
    $hash = $self->json_data if $self->param('json');

    # Convenience
    my $prefix = $hash->{prefix} || $self->param('prefix');
    my $affix  = $hash->{affix}  || $self->param('affix');
    my $suffix = $hash->{suffix} || $self->param('suffix');
    my $defn   = $hash->{defn}   || $self->param('defn');
    my $etym   = $hash->{etym}   || $self->param('etym');

    $affix = _prefix_suffix( $affix, $prefix, $suffix );

    my ( $sth, $rv ) = $self->db_prepare_and_execute( $INSERT_SQL, [ $affix, $defn, $etym ] );
    my $new_id = $sth->{mysql_insertid};
    $self->db_finish_and_disconnect($sth);

    if ($new_id) {
        return $self->render( json => { result => 1, message => 'OK', id => $new_id } );
    }
    else {
        return $self->render( json => { result => 0, message => 'Insert Failure' } );
    }
};

# curl -X PUT --data 'token=ABC123&json={"id":"942","affix":"XXX","defn":"abc","etym":"foo"}' http://127.0.0.1:3000/update
# curl -X PUT --data 'token=ABC123&id=942&affix=XXX&defn=abc&etym=foo' http://127.0.0.1:3000/update
put '/update/' => sub {
    my $self = shift;

    my $hash;
    $hash = $self->json_data if $self->param('json');

    # Convenience
    my $id     = $hash->{id}     || $self->param('id');
    my $prefix = $hash->{prefix} || $self->param('prefix');
    my $affix  = $hash->{affix}  || $self->param('affix');
    my $suffix = $hash->{suffix} || $self->param('suffix');
    my $defn   = $hash->{defn}   || $self->param('defn');
    my $etym   = $hash->{etym}   || $self->param('etym');

    $affix = _prefix_suffix( $affix, $prefix, $suffix );

    my ( $sth, $rv ) = $self->db_prepare_and_execute( $UPDATE_SQL, [ $affix, $defn, $etym, $id ] );
    $self->db_finish_and_disconnect($sth);

    if ($rv) {
        return $self->render( json => { result => 1, message => 'OK' } );
    }
    else {
        return $self->render( json => { result => 0, message => 'Update Failure' } );
    }
};

# curl -X DELETE http://127.0.0.1:3000/delete/42?token=ABC123
del '/delete/:id' => sub {
    my $self = shift;

    my $id = $self->stash('id');

    my ( $sth, $rv ) = $self->db_prepare_and_execute( $DELETE_SQL, [ $id ] );
    $self->db_finish_and_disconnect($sth);

    if ( $rv && $rv ne '0E0' ) {
        return $self->render( json => { result => 1, message => 'OK' } );
    }
    else {
        return $self->render( json => { result => 0, message => 'Delete Failure' } );
    }
};

# http://127.0.0.1:3000/edit/1?token=ABC123
get '/edit/:id' => sub {
    my $self = shift;

    my $id = $self->stash('id');

    my ( $sth, $rv ) = $self->db_prepare_and_execute( $EDIT_SQL, [ $id ] );
    my $part = $sth->fetchall_hashref('id');
    $self->db_finish_and_disconnect($sth);

    $self->stash( affix      => '' );
    $self->stash( definition => '' );
    $self->stash( etymology  => '' );
    $self->stash( method     => 'add' );
    my ($p) = values %$part;
    if ( keys %$part ) {
        $self->stash( $_ => $p->{$_} ) for keys %$p;
        $self->stash( method => 'update' );
    }

    $self->render('edit');
};

# curl http://127.0.0.1:5000/parse/biology?token=ABC123
get '/parse/:word' => sub {
    my $self = shift;

    my $word = $self->stash('word');
    my $results;

    if ( $word && length $word > $MAX_WORD_SIZE ) {
        return $self->render(
            json => {
                result  => 0,
                message => "The word cannot have more than $MAX_WORD_SIZE letters",
            }
        );
    }
    elsif ( $word ) {
        my $p = Lingua::Word::Parser->new(
            word   => $word,
            dbname => $DB_NAME,
            dbuser => $DB_USER,
            dbpass => $DB_PASS,
            dbtype => $DB_TYPE,
            dbhost => $DB_HOST,
        );

        # Find the known word-part positions.
        $p->knowns;
        $p->power;
        my $score = $p->score( '[', ']' );

        for my $key ( reverse sort keys %$score ) {
            push @$results, $score->{$key};
        }
    }

    if ( @$results ) {
        return $self->render( json => { result => $results->[0] } );
    }
    else {
        return $self->render( json => { result => 0, message => 'No results' } );
    }
};

sub _search_records {
    my $self = shift;
    my ( $param, $column ) = @_;

    my $value = $self->stash($param);

    my $sql = sprintf $SEARCH_SQL, $column;
    my ( $sth, $rv ) = $self->db_prepare_and_execute( $sql, [ '%' . $value . '%' ] );
    my $records = $sth->fetchall_hashref('id');
    $self->db_finish_and_disconnect($sth);

    my $results = [];
    for my $record ( keys %$records ) {
        push @$results, $records->{$record};
    }

    if ( @$results ) {
        return $self->render( json => $results );
    }
    else {
        return $self->render( json => { result => 0, message => "No such $column" } );
    }
}

sub _prefix_suffix {
    my ( $affix, $prefix, $suffix ) = @_;

    $affix = $SUFFIX . $affix if $suffix;
    $affix .= $PREFIX if $prefix;

    return $affix;
}

app->secrets([$APP_SECRET]);

app->start;
__DATA__

@@ edit.html.ep
<!DOCTYPE html>
<html>
<head><title>Edit a Fragment</title></head>
<body>
<form action="/<%= $method %>/" method="post">
<input type="hidden" name="token" value="ABC123"/>
<input type="hidden" name="id" value="<%= $id %>"/>
Follows: <input type="checkbox" name="prefix"/>
Affix: <input type="text" name="affix" value="<%= $affix %>"/>
Precedes: <input type="checkbox" name="suffix"/>
Defn: <input type="text" name="defn" value="<%= $definition %>"/>
Etym: <input type="text" name="etym" value="<%= $etymology %>"/>
<input type="submit" name="<%= $method %>" value="<%= $method %>"/>
</form>
<!--
<form action="/delete/<%= $id %>" method="delete">
<input type="hidden" name="token" value="ABC123"/>
<input type="submit" name="delete" value="delete"/>
</form>
-->
</body>
</html>
